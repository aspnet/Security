// <auto-generated />
namespace Microsoft.AspNetCore.Authentication.WsFederation
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNetCore.Authentication.WsFederation.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// The service descriptor is missing.
        /// </summary>
        internal static string Exception_MissingDescriptor
        {
            get => GetString("Exception_MissingDescriptor");
        }

        /// <summary>
        /// The service descriptor is missing.
        /// </summary>
        internal static string FormatException_MissingDescriptor()
            => GetString("Exception_MissingDescriptor");

        /// <summary>
        /// No token validator was found for the given token.
        /// </summary>
        internal static string Exception_NoTokenValidatorFound
        {
            get => GetString("Exception_NoTokenValidatorFound");
        }

        /// <summary>
        /// No token validator was found for the given token.
        /// </summary>
        internal static string FormatException_NoTokenValidatorFound()
            => GetString("Exception_NoTokenValidatorFound");

        /// <summary>
        /// The '{0}' option must be provided.
        /// </summary>
        internal static string Exception_OptionMustBeProvided
        {
            get => GetString("Exception_OptionMustBeProvided");
        }

        /// <summary>
        /// The '{0}' option must be provided.
        /// </summary>
        internal static string FormatException_OptionMustBeProvided(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("Exception_OptionMustBeProvided"), p0);

        /// <summary>
        /// An ICertificateValidator cannot be specified at the same time as an HttpMessageHandler unless it is a WebRequestHandler.
        /// </summary>
        internal static string Exception_ValidatorHandlerMismatch
        {
            get => GetString("Exception_ValidatorHandlerMismatch");
        }

        /// <summary>
        /// An ICertificateValidator cannot be specified at the same time as an HttpMessageHandler unless it is a WebRequestHandler.
        /// </summary>
        internal static string FormatException_ValidatorHandlerMismatch()
            => GetString("Exception_ValidatorHandlerMismatch");

        /// <summary>
        /// The sign in message does not contain a required token.
        /// </summary>
        internal static string SignInMessageTokenIsMissing
        {
            get => GetString("SignInMessageTokenIsMissing");
        }

        /// <summary>
        /// The sign in message does not contain a required token.
        /// </summary>
        internal static string FormatSignInMessageTokenIsMissing()
            => GetString("SignInMessageTokenIsMissing");

        /// <summary>
        /// The sign in message does not contain a required wresult.
        /// </summary>
        internal static string SignInMessageWresultIsMissing
        {
            get => GetString("SignInMessageWresultIsMissing");
        }

        /// <summary>
        /// The sign in message does not contain a required wresult.
        /// </summary>
        internal static string FormatSignInMessageWresultIsMissing()
            => GetString("SignInMessageWresultIsMissing");

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
